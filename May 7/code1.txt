Link to question : https://leetcode.com/problems/cousins-in-binary-tree/Solution :

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int getLevel(TreeNode* root, int num)
    {
        if(!root)
            return 0;
        
        int breakFree = 0;
        int n = 0;
        int level = 0;
       queue<TreeNode*> q;
       q.push(root);
        
        while(1)
        {
            n = q.size();
            if(n == 0)
            { 
               return -1;
            }
            while(n--)
            {   
                TreeNode* node = q.front();
                q.pop();
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
                if(node->val == num)
                {
                    breakFree = 1;
                    break;
                }
            }
            if(breakFree)
            {
                break;
            }
            level++;
            
        }
        return level;
    }
    
    TreeNode* getParent(TreeNode* root, int num)
    {
        if(!root)
            return 0;
        
       stack<TreeNode*> s;
       s.push(root);
       TreeNode* parent = NULL;
       int breakFree = 0;
       int n = 0; 
        while(1)
        {
            n = s.size();
            if(n == 0)
            { 
               return NULL;
            }
            while(n--)
            {   
                TreeNode* node = s.top();
                s.pop();
                if(node->left)
                {
                    s.push(node->left);
                    if(node->left->val == num)
                    {
                        parent = node;
                        breakFree = 1;
                        break;
                    }
                }
                if(node->right)
                {
                    s.push(node->right);
                     if(node->right->val == num)
                     {
                         parent = node;
                         breakFree = 1;
                         break;
                     }
                }
            }
            if(breakFree)
                break;
        }
        return parent;
    }
    
    bool isCousins(TreeNode* root, int x, int y) {
      
        if(getLevel(root,x)!= -1 && getLevel(root,y)!= -1 && getLevel(root,x) == getLevel(root,y))
        {
            if(getParent(root,x) && getParent(root,y) && getParent(root,x) != getParent(root,y))
                return true;
        }
        return false;
    }
};