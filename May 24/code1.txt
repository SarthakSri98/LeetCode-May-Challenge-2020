Link to question : https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/

  
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* bstFromPreorder(vector<int>& pre) {
        TreeNode* root = new TreeNode(pre[0]);
        stack<TreeNode*> s1;
        
        TreeNode* temp;
        s1.push(root);
        
        for(int i=1;i<pre.size();i++)
        {
            temp = NULL;
            while(!s1.empty() && pre[i]>s1.top()->val)
            {
                temp = s1.top();
                s1.pop();
            }
            
            if(temp != NULL)
            {
                temp->right = new TreeNode(pre[i]);
                s1.push(temp->right);
            }
            else
            {
                s1.top()->left = new TreeNode(pre[i]);
                s1.push(s1.top()->left);
            }
            
        }
        return root;
        
    }
};